from_1001_to_1100.out-CapturedException(ArgumentError("cannot parse \"-5.709769e-047\" as Float32"), Any[(_parse_failure(::Type{T} where T, ::SubString{String}, ::Int64, ::Int64) at parse.jl:370, 2), (#tryparse_internal#364 at parse.jl:366 [inlined], 1), (tryparse_internal at parse.jl:364 [inlined], 1), (#parse#365 at parse.jl:376 [inlined], 1), (parse at parse.jl:376 [inlined], 1), (_broadcast_getindex_evalf at broadcast.jl:648 [inlined], 1), (_broadcast_getindex at broadcast.jl:631 [inlined], 1), (getindex at broadcast.jl:575 [inlined], 1), (macro expansion at broadcast.jl:932 [inlined], 1), (macro expansion at simdloop.jl:77 [inlined], 1), (copyto! at broadcast.jl:931 [inlined], 1), (copyto! at broadcast.jl:886 [inlined], 1), (copy at broadcast.jl:862 [inlined], 1), (materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(parse),Tuple{Base.RefValue{Type{Float32}},Array{SubString{String},1}}}) at broadcast.jl:837, 1), (load(::Stream{DataFormat{:STL_ASCII},IOStream,String}; facetype::Type{T} where T, pointtype::Type{T} where T, normaltype::Type{T} where T, topology::Bool) at stl.jl:111, 1), (load at stl.jl:96 [inlined], 1), (#21 at MeshIO.jl:29 [inlined], 1), (open(::MeshIO.var"#21#22"{Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}, ::File{DataFormat{:STL_ASCII},String}; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at io.jl:325, 1), (open at io.jl:323 [inlined], 1), (#load#20 at MeshIO.jl:27 [inlined], 1), (load(::File{DataFormat{:STL_ASCII},String}) at MeshIO.jl:27, 1), (#invokelatest#1 at essentials.jl:710 [inlined], 1), (invokelatest at essentials.jl:709 [inlined], 1), (action(::Symbol, ::Array{Union{Base.PkgId, Module},1}, ::Formatted; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at loadsave.jl:212, 1), (action at loadsave.jl:192 [inlined], 1), (load(::Formatted; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at loadsave.jl:120, 1), (load at loadsave.jl:117 [inlined], 1), (read_stl(::String) at STLs.jl:146, 1), (_run_and_save(::String; title::String, verbose::Bool, vtk::Bool, δ::Float64, nmin::Int64, nmax::Int64, Δx::Int64, θ::Int64, kdtree::Bool, tolfactor::Float64, poisson::Bool, solution_order::Int64, agfem_threshold::Int64, solver::Symbol) at RunSave.jl:164, 1), (run_and_save(::String; datapath::String, verbose::Bool, vtk::Bool, rerun::Bool, params::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at RunSave.jl:250, 1), (run_geometry_list(::Array{Int64,1}, ::Dict{Int64,Union{Nothing, String}}; verbose::Bool, params::Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:rerun, :datapath),Tuple{Bool,String}}}) at RunSave.jl:283, 1), (top-level scope at none:5, 1), (eval(::Module, ::Any) at boot.jl:331, 1), (exec_options(::Base.JLOptions) at client.jl:272, 1), (_start() at client.jl:506, 1)])
from_1001_to_1100.out:Failed run of geometry 73153
--
from_1001_to_1100.out-CapturedException(ArgumentError("cannot parse \"5.707959e-047\" as Float32"), Any[(_parse_failure(::Type{T} where T, ::SubString{String}, ::Int64, ::Int64) at parse.jl:370, 2), (#tryparse_internal#364 at parse.jl:366 [inlined], 1), (tryparse_internal at parse.jl:364 [inlined], 1), (#parse#365 at parse.jl:376 [inlined], 1), (parse at parse.jl:376 [inlined], 1), (_broadcast_getindex_evalf at broadcast.jl:648 [inlined], 1), (_broadcast_getindex at broadcast.jl:631 [inlined], 1), (getindex at broadcast.jl:575 [inlined], 1), (macro expansion at broadcast.jl:932 [inlined], 1), (macro expansion at simdloop.jl:77 [inlined], 1), (copyto! at broadcast.jl:931 [inlined], 1), (copyto! at broadcast.jl:886 [inlined], 1), (copy at broadcast.jl:862 [inlined], 1), (materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(parse),Tuple{Base.RefValue{Type{Float32}},Array{SubString{String},1}}}) at broadcast.jl:837, 1), (load(::Stream{DataFormat{:STL_ASCII},IOStream,String}; facetype::Type{T} where T, pointtype::Type{T} where T, normaltype::Type{T} where T, topology::Bool) at stl.jl:111, 1), (load at stl.jl:96 [inlined], 1), (#21 at MeshIO.jl:29 [inlined], 1), (open(::MeshIO.var"#21#22"{Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}, ::File{DataFormat{:STL_ASCII},String}; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at io.jl:325, 1), (open at io.jl:323 [inlined], 1), (#load#20 at MeshIO.jl:27 [inlined], 1), (load(::File{DataFormat{:STL_ASCII},String}) at MeshIO.jl:27, 1), (#invokelatest#1 at essentials.jl:710 [inlined], 1), (invokelatest at essentials.jl:709 [inlined], 1), (action(::Symbol, ::Array{Union{Base.PkgId, Module},1}, ::Formatted; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at loadsave.jl:212, 1), (action at loadsave.jl:192 [inlined], 1), (load(::Formatted; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at loadsave.jl:120, 1), (load at loadsave.jl:117 [inlined], 1), (read_stl(::String) at STLs.jl:146, 1), (_run_and_save(::String; title::String, verbose::Bool, vtk::Bool, δ::Float64, nmin::Int64, nmax::Int64, Δx::Int64, θ::Int64, kdtree::Bool, tolfactor::Float64, poisson::Bool, solution_order::Int64, agfem_threshold::Int64, solver::Symbol) at RunSave.jl:164, 1), (run_and_save(::String; datapath::String, verbose::Bool, vtk::Bool, rerun::Bool, params::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at RunSave.jl:250, 1), (run_geometry_list(::Array{Int64,1}, ::Dict{Int64,Union{Nothing, String}}; verbose::Bool, params::Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:rerun, :datapath),Tuple{Bool,String}}}) at RunSave.jl:283, 1), (top-level scope at none:5, 1), (eval(::Module, ::Any) at boot.jl:331, 1), (exec_options(::Base.JLOptions) at client.jl:272, 1), (_start() at client.jl:506, 1)])
from_1001_to_1100.out:Failed run of geometry 73154
--
from_1301_to_1400.out-AssertionError("count(iszero, vertices_map) == 0")
from_1301_to_1400.out:Failed run of geometry 82536
--
from_1401_to_1500.out-ErrorException("Edge too sharp")
from_1401_to_1500.out:Failed run of geometry 84915
--
from_1401_to_1500.out-AssertionError("count(iszero, vertices_map) == 0")
from_1401_to_1500.out:Failed run of geometry 89266
--
from_1501_to_1600.out-AssertionError("is_water_tight(stl)")
from_1501_to_1600.out:Failed run of geometry 91474
--
from_1601_to_1700.out-ErrorException("Edge too sharp")
from_1601_to_1700.out:Failed run of geometry 95796
--
from_1601_to_1700.out-ErrorException("Edge too sharp")
from_1601_to_1700.out:Failed run of geometry 95797
--
from_1801_to_1900.out-CapturedException(ArgumentError("cannot parse \"-6.708861e-48\" as Float32"), Any[(_parse_failure(::Type{T} where T, ::SubString{String}, ::Int64, ::Int64) at parse.jl:370, 2), (#tryparse_internal#364 at parse.jl:366 [inlined], 1), (tryparse_internal at parse.jl:364 [inlined], 1), (#parse#365 at parse.jl:376 [inlined], 1), (parse at parse.jl:376 [inlined], 1), (_broadcast_getindex_evalf at broadcast.jl:648 [inlined], 1), (_broadcast_getindex at broadcast.jl:631 [inlined], 1), (getindex at broadcast.jl:575 [inlined], 1), (macro expansion at broadcast.jl:932 [inlined], 1), (macro expansion at simdloop.jl:77 [inlined], 1), (copyto! at broadcast.jl:931 [inlined], 1), (copyto! at broadcast.jl:886 [inlined], 1), (copy at broadcast.jl:862 [inlined], 1), (materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(parse),Tuple{Base.RefValue{Type{Float32}},Array{SubString{String},1}}}) at broadcast.jl:837, 1), (load(::Stream{DataFormat{:STL_ASCII},IOStream,String}; facetype::Type{T} where T, pointtype::Type{T} where T, normaltype::Type{T} where T, topology::Bool) at stl.jl:111, 1), (load at stl.jl:96 [inlined], 1), (#21 at MeshIO.jl:29 [inlined], 1), (open(::MeshIO.var"#21#22"{Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}, ::File{DataFormat{:STL_ASCII},String}; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at io.jl:325, 1), (open at io.jl:323 [inlined], 1), (#load#20 at MeshIO.jl:27 [inlined], 1), (load(::File{DataFormat{:STL_ASCII},String}) at MeshIO.jl:27, 1), (#invokelatest#1 at essentials.jl:710 [inlined], 1), (invokelatest at essentials.jl:709 [inlined], 1), (action(::Symbol, ::Array{Union{Base.PkgId, Module},1}, ::Formatted; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at loadsave.jl:212, 1), (action at loadsave.jl:192 [inlined], 1), (load(::Formatted; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at loadsave.jl:120, 1), (load at loadsave.jl:117 [inlined], 1), (read_stl(::String) at STLs.jl:146, 1), (_run_and_save(::String; title::String, verbose::Bool, vtk::Bool, δ::Float64, nmin::Int64, nmax::Int64, Δx::Int64, θ::Int64, kdtree::Bool, tolfactor::Float64, poisson::Bool, solution_order::Int64, agfem_threshold::Int64, solver::Symbol) at RunSave.jl:164, 1), (run_and_save(::String; datapath::String, verbose::Bool, vtk::Bool, rerun::Bool, params::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at RunSave.jl:250, 1), (run_geometry_list(::Array{Int64,1}, ::Dict{Int64,Union{Nothing, String}}; verbose::Bool, params::Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:rerun, :datapath),Tuple{Bool,String}}}) at RunSave.jl:283, 1), (top-level scope at none:5, 1), (eval(::Module, ::Any) at boot.jl:331, 1), (exec_options(::Base.JLOptions) at client.jl:272, 1), (_start() at client.jl:506, 1)])
from_1801_to_1900.out:Failed run of geometry 98765
--
from_1_to_100.out-ErrorException("This function is not yet implemented")
from_1_to_100.out:Failed run of geometry 39182
--
from_2101_to_2200.out-ErrorException("Edge too sharp")
from_2101_to_2200.out:Failed run of geometry 111599
--
from_2201_to_2300.out-AssertionError("is_water_tight(stl)")
from_2201_to_2300.out:Failed run of geometry 119829
--
from_2201_to_2300.out-AssertionError("is_water_tight(stl)")
from_2201_to_2300.out:Failed run of geometry 119830
--
from_2201_to_2300.out-ErrorException("Edge too sharp")
from_2201_to_2300.out:Failed run of geometry 124043
--
from_2201_to_2300.out-AssertionError("abs(signed_distance(v, Πf[f])) < atol")
from_2201_to_2300.out:Failed run of geometry 124186
--
from_2301_to_2400.out-AssertionError("abs(signed_distance(v, Πf[f])) < atol")
from_2301_to_2400.out:Failed run of geometry 126284
--
from_2401_to_2500.out-AssertionError("is_water_tight(stl)")
from_2401_to_2500.out:Failed run of geometry 135071
--
from_2401_to_2500.out-ErrorException("Edge too sharp")
from_2401_to_2500.out:Failed run of geometry 135074
--
from_2401_to_2500.out-ErrorException("Unable to build vertex-edge graph")
from_2401_to_2500.out:Failed run of geometry 135218
--
from_2401_to_2500.out-AssertionError("is_water_tight(stl)")
from_2401_to_2500.out:Failed run of geometry 135803
--
from_2501_to_2600.out-ErrorException("Edge too sharp")
from_2501_to_2600.out:Failed run of geometry 138581
--
from_2601_to_2700.out-AssertionError("is_water_tight(stl)")
from_2601_to_2700.out:Failed run of geometry 190399
--
from_2601_to_2700.out-AssertionError("is_water_tight(stl)")
from_2601_to_2700.out:Failed run of geometry 190402
--
from_2601_to_2700.out-AssertionError("is_water_tight(stl)")
from_2601_to_2700.out:Failed run of geometry 190415
--
from_2601_to_2700.out-ErrorException("Edge too sharp")
from_2601_to_2700.out:Failed run of geometry 196123
--
from_2601_to_2700.out-ErrorException("Edge too sharp")
from_2601_to_2700.out:Failed run of geometry 196126
--
from_2601_to_2700.out-ErrorException("Edge too sharp")
from_2601_to_2700.out:Failed run of geometry 196127
--
from_2601_to_2700.out-ErrorException("Edge too sharp")
from_2601_to_2700.out:Failed run of geometry 196190
--
from_2701_to_2800.out-ErrorException("Edge too sharp")
from_2701_to_2800.out:Failed run of geometry 216763
--
from_2801_to_2900.out-ErrorException("Edge too sharp")
from_2801_to_2900.out:Failed run of geometry 230152
--
from_2801_to_2900.out-ErrorException("Edge too sharp")
from_2801_to_2900.out:Failed run of geometry 230153
--
from_301_to_400.out-ErrorException("Edge too sharp")
from_301_to_400.out:Failed run of geometry 47732
--
from_301_to_400.out-ErrorException("Edge too sharp")
from_301_to_400.out:Failed run of geometry 48479
--
from_401_to_500.out-AssertionError("is_water_tight(stl)")
from_401_to_500.out:Failed run of geometry 51011
--
from_601_to_700.out-CapturedException(ArgumentError("cannot parse \"-7.74115e-48\" as Float32"), Any[(_parse_failure(::Type{T} where T, ::SubString{String}, ::Int64, ::Int64) at parse.jl:370, 2), (#tryparse_internal#364 at parse.jl:366 [inlined], 1), (tryparse_internal at parse.jl:364 [inlined], 1), (#parse#365 at parse.jl:376 [inlined], 1), (parse at parse.jl:376 [inlined], 1), (_broadcast_getindex_evalf at broadcast.jl:648 [inlined], 1), (_broadcast_getindex at broadcast.jl:631 [inlined], 1), (getindex at broadcast.jl:575 [inlined], 1), (macro expansion at broadcast.jl:932 [inlined], 1), (macro expansion at simdloop.jl:77 [inlined], 1), (copyto! at broadcast.jl:931 [inlined], 1), (copyto! at broadcast.jl:886 [inlined], 1), (copy at broadcast.jl:862 [inlined], 1), (materialize(::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(parse),Tuple{Base.RefValue{Type{Float32}},Array{SubString{String},1}}}) at broadcast.jl:837, 1), (load(::Stream{DataFormat{:STL_ASCII},IOStream,String}; facetype::Type{T} where T, pointtype::Type{T} where T, normaltype::Type{T} where T, topology::Bool) at stl.jl:108, 1), (load at stl.jl:96 [inlined], 1), (#21 at MeshIO.jl:29 [inlined], 1), (open(::MeshIO.var"#21#22"{Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}}, ::File{DataFormat{:STL_ASCII},String}; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at io.jl:325, 1), (open at io.jl:323 [inlined], 1), (#load#20 at MeshIO.jl:27 [inlined], 1), (load(::File{DataFormat{:STL_ASCII},String}) at MeshIO.jl:27, 1), (#invokelatest#1 at essentials.jl:710 [inlined], 1), (invokelatest at essentials.jl:709 [inlined], 1), (action(::Symbol, ::Array{Union{Base.PkgId, Module},1}, ::Formatted; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at loadsave.jl:212, 1), (action at loadsave.jl:192 [inlined], 1), (load(::Formatted; options::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at loadsave.jl:120, 1), (load at loadsave.jl:117 [inlined], 1), (read_stl(::String) at STLs.jl:146, 1), (_run_and_save(::String; title::String, verbose::Bool, vtk::Bool, δ::Float64, nmin::Int64, nmax::Int64, Δx::Int64, θ::Int64, kdtree::Bool, tolfactor::Float64, poisson::Bool, solution_order::Int64, agfem_threshold::Int64, solver::Symbol) at RunSave.jl:164, 1), (run_and_save(::String; datapath::String, verbose::Bool, vtk::Bool, rerun::Bool, params::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at RunSave.jl:250, 1), (run_geometry_list(::Array{Int64,1}, ::Dict{Int64,Union{Nothing, String}}; verbose::Bool, params::Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:rerun, :datapath),Tuple{Bool,String}}}) at RunSave.jl:283, 1), (top-level scope at none:5, 1), (eval(::Module, ::Any) at boot.jl:331, 1), (exec_options(::Base.JLOptions) at client.jl:272, 1), (_start() at client.jl:506, 1)])
from_601_to_700.out:Failed run of geometry 57812
--
from_601_to_700.out-ErrorException("Edge too sharp")
from_601_to_700.out:Failed run of geometry 60514
--
from_901_to_1000.out-ErrorException("Edge too sharp")
from_901_to_1000.out:Failed run of geometry 70045
--
from_901_to_1000.out-ErrorException("Edge too sharp")
from_901_to_1000.out:Failed run of geometry 70060
